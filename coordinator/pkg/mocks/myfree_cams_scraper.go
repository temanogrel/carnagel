// Code generated by mockery v1.0.0. DO NOT EDIT.
package coordinator_mocks

import context "context"
import coordinator "git.misc.vee.bz/carnagel/coordinator/pkg"
import mock "github.com/stretchr/testify/mock"

// MyfreeCamsScraper is an autogenerated mock type for the MyfreeCamsScraper type
type MyfreeCamsScraper struct {
	mock.Mock
}

// GetPerformers provides a mock function with given fields:
func (_m *MyfreeCamsScraper) GetPerformers() ([]*coordinator.MyFreeCamsPerformer, int) {
	ret := _m.Called()

	var r0 []*coordinator.MyFreeCamsPerformer
	if rf, ok := ret.Get(0).(func() []*coordinator.MyFreeCamsPerformer); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*coordinator.MyFreeCamsPerformer)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func() int); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(int)
	}

	return r0, r1
}

// GetSessionId provides a mock function with given fields:
func (_m *MyfreeCamsScraper) GetSessionId() int64 {
	ret := _m.Called()

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// Scrape provides a mock function with given fields: ctx
func (_m *MyfreeCamsScraper) Scrape(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
