// Code generated by mockery v1.0.0. DO NOT EDIT.
package encoder_mocks

import context "context"
import ecosystem "git.misc.vee.bz/carnagel/go-ecosystem/domain"
import encoder "git.misc.vee.bz/carnagel/encoder/pkg"
import mock "github.com/stretchr/testify/mock"

// Pipeline is an autogenerated mock type for the Pipeline type
type Pipeline struct {
	mock.Mock
}

// Process provides a mock function with given fields: ctx, app, recording
func (_m *Pipeline) Process(ctx context.Context, app *encoder.Application, recording *ecosystem.Recording) (context.Context, error) {
	ret := _m.Called(ctx, app, recording)

	var r0 context.Context
	if rf, ok := ret.Get(0).(func(context.Context, *encoder.Application, *ecosystem.Recording) context.Context); ok {
		r0 = rf(ctx, app, recording)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *encoder.Application, *ecosystem.Recording) error); ok {
		r1 = rf(ctx, app, recording)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
