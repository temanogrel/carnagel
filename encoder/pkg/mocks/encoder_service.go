// Code generated by mockery v1.0.0. DO NOT EDIT.
package encoder_mocks

import context "context"
import encoder "git.misc.vee.bz/carnagel/encoder/pkg"
import mock "github.com/stretchr/testify/mock"

// EncoderService is an autogenerated mock type for the EncoderService type
type EncoderService struct {
	mock.Mock
}

// EncodeHls2Mp4 provides a mock function with given fields: ctx, source, target, manifest
func (_m *EncoderService) EncodeHls2Mp4(ctx context.Context, source string, target string, manifest string) error {
	ret := _m.Called(ctx, source, target, manifest)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, source, target, manifest)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EncodeMp42Hls provides a mock function with given fields: ctx, source, target, manifest
func (_m *EncoderService) EncodeMp42Hls(ctx context.Context, source string, target string, manifest string) error {
	ret := _m.Called(ctx, source, target, manifest)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, source, target, manifest)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EncodeToH264 provides a mock function with given fields: ctx, source, target, meta
func (_m *EncoderService) EncodeToH264(ctx context.Context, source string, target string, meta *encoder.VideoMeta) error {
	ret := _m.Called(ctx, source, target, meta)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *encoder.VideoMeta) error); ok {
		r0 = rf(ctx, source, target, meta)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EncodeToH265 provides a mock function with given fields: ctx, source, target, meta
func (_m *EncoderService) EncodeToH265(ctx context.Context, source string, target string, meta *encoder.VideoMeta) error {
	ret := _m.Called(ctx, source, target, meta)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *encoder.VideoMeta) error); ok {
		r0 = rf(ctx, source, target, meta)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GenerateInfinityCollage provides a mock function with given fields: ctx, source, target
func (_m *EncoderService) GenerateInfinityCollage(ctx context.Context, source string, target string) error {
	ret := _m.Called(ctx, source, target)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, source, target)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GenerateInfinitySprites provides a mock function with given fields: ctx, source
func (_m *EncoderService) GenerateInfinitySprites(ctx context.Context, source string) ([]string, string, error) {
	ret := _m.Called(ctx, source)

	var r0 []string
	if rf, ok := ret.Get(0).(func(context.Context, string) []string); ok {
		r0 = rf(ctx, source)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 string
	if rf, ok := ret.Get(1).(func(context.Context, string) string); ok {
		r1 = rf(ctx, source)
	} else {
		r1 = ret.Get(1).(string)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string) error); ok {
		r2 = rf(ctx, source)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GenerateInfinityThumbs provides a mock function with given fields: ctx, source, interval
func (_m *EncoderService) GenerateInfinityThumbs(ctx context.Context, source string, interval uint) ([]string, string, error) {
	ret := _m.Called(ctx, source, interval)

	var r0 []string
	if rf, ok := ret.Get(0).(func(context.Context, string, uint) []string); ok {
		r0 = rf(ctx, source, interval)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 string
	if rf, ok := ret.Get(1).(func(context.Context, string, uint) string); ok {
		r1 = rf(ctx, source, interval)
	} else {
		r1 = ret.Get(1).(string)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, uint) error); ok {
		r2 = rf(ctx, source, interval)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GenerateWordpressCollage provides a mock function with given fields: ctx, source, target, filename
func (_m *EncoderService) GenerateWordpressCollage(ctx context.Context, source string, target string, filename string) error {
	ret := _m.Called(ctx, source, target, filename)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, source, target, filename)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Probe provides a mock function with given fields: ctx, source
func (_m *EncoderService) Probe(ctx context.Context, source string) (*encoder.VideoMeta, error) {
	ret := _m.Called(ctx, source)

	var r0 *encoder.VideoMeta
	if rf, ok := ret.Get(0).(func(context.Context, string) *encoder.VideoMeta); ok {
		r0 = rf(ctx, source)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*encoder.VideoMeta)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, source)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
