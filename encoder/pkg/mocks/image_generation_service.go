// Code generated by mockery v1.0.0. DO NOT EDIT.
package encoder_mocks

import context "context"

import mock "github.com/stretchr/testify/mock"

// ImageGenerationService is an autogenerated mock type for the ImageGenerationService type
type ImageGenerationService struct {
	mock.Mock
}

// InfinityCollage provides a mock function with given fields: ctx, source, target
func (_m *ImageGenerationService) InfinityCollage(ctx context.Context, source string, target string) error {
	ret := _m.Called(ctx, source, target)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, source, target)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InfinitySprites provides a mock function with given fields: ctx, source, target
func (_m *ImageGenerationService) InfinitySprites(ctx context.Context, source string, target string) error {
	ret := _m.Called(ctx, source, target)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, source, target)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InfinityThumbs provides a mock function with given fields: ctx, source, target
func (_m *ImageGenerationService) InfinityThumbs(ctx context.Context, source string, target string) error {
	ret := _m.Called(ctx, source, target)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, source, target)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WordpressCollage provides a mock function with given fields: ctx, source, target, filename
func (_m *ImageGenerationService) WordpressCollage(ctx context.Context, source string, target string, filename string) error {
	ret := _m.Called(ctx, source, target, filename)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, source, target, filename)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
