// Code generated by mockery v1.0.0. DO NOT EDIT.
package encoder_mocks

import context "context"
import ecosystem "git.misc.vee.bz/carnagel/go-ecosystem/domain"

import mock "github.com/stretchr/testify/mock"

// ComposedPipelines is an autogenerated mock type for the ComposedPipelines type
type ComposedPipelines struct {
	mock.Mock
}

// ConvertMp42Hls provides a mock function with given fields: ctx, rec
func (_m *ComposedPipelines) ConvertMp42Hls(ctx context.Context, rec *ecosystem.Recording) error {
	ret := _m.Called(ctx, rec)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *ecosystem.Recording) error); ok {
		r0 = rf(ctx, rec)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewRecordingPipeline provides a mock function with given fields: ctx, rec
func (_m *ComposedPipelines) NewRecordingPipeline(ctx context.Context, rec *ecosystem.Recording) error {
	ret := _m.Called(ctx, rec)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *ecosystem.Recording) error); ok {
		r0 = rf(ctx, rec)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegenerateImages provides a mock function with given fields: ctx, rec, system
func (_m *ComposedPipelines) RegenerateImages(ctx context.Context, rec *ecosystem.Recording, system string) error {
	ret := _m.Called(ctx, rec, system)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *ecosystem.Recording, string) error); ok {
		r0 = rf(ctx, rec, system)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ReplaceCorruptHls provides a mock function with given fields: ctx, rec
func (_m *ComposedPipelines) ReplaceCorruptHls(ctx context.Context, rec *ecosystem.Recording) error {
	ret := _m.Called(ctx, rec)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *ecosystem.Recording) error); ok {
		r0 = rf(ctx, rec)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
