// Code generated by mockery v1.0.0. DO NOT EDIT.
package infinity_mocks

import ecosystem "git.misc.vee.bz/carnagel/go-ecosystem/domain"
import minerva "git.misc.vee.bz/carnagel/minerva/pkg"
import mock "github.com/stretchr/testify/mock"
import uuid "github.com/satori/go.uuid"

// FileRepository is an autogenerated mock type for the FileRepository type
type FileRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: file
func (_m *FileRepository) Create(file *minerva.File) error {
	ret := _m.Called(file)

	var r0 error
	if rf, ok := ret.Get(0).(func(*minerva.File) error); ok {
		r0 = rf(file)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: file
func (_m *FileRepository) Delete(file *minerva.File) error {
	ret := _m.Called(file)

	var r0 error
	if rf, ok := ret.Get(0).(func(*minerva.File) error); ok {
		r0 = rf(file)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByExternalId provides a mock function with given fields: id
func (_m *FileRepository) GetByExternalId(id ecosystem.ExternalId) ([]*minerva.File, error) {
	ret := _m.Called(id)

	var r0 []*minerva.File
	if rf, ok := ret.Get(0).(func(ecosystem.ExternalId) []*minerva.File); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*minerva.File)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(ecosystem.ExternalId) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByExternalIds provides a mock function with given fields: ids
func (_m *FileRepository) GetByExternalIds(ids []ecosystem.ExternalId) ([]*minerva.File, error) {
	ret := _m.Called(ids)

	var r0 []*minerva.File
	if rf, ok := ret.Get(0).(func([]ecosystem.ExternalId) []*minerva.File); ok {
		r0 = rf(ids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*minerva.File)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]ecosystem.ExternalId) error); ok {
		r1 = rf(ids)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByLocation provides a mock function with given fields: hostname, path
func (_m *FileRepository) GetByLocation(hostname string, path string) (*minerva.File, error) {
	ret := _m.Called(hostname, path)

	var r0 *minerva.File
	if rf, ok := ret.Get(0).(func(string, string) *minerva.File); ok {
		r0 = rf(hostname, path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*minerva.File)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(hostname, path)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByUuid provides a mock function with given fields: id
func (_m *FileRepository) GetByUuid(id uuid.UUID) (*minerva.File, error) {
	ret := _m.Called(id)

	var r0 *minerva.File
	if rf, ok := ret.Get(0).(func(uuid.UUID) *minerva.File); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*minerva.File)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOldestUpdatedAtByHostnameAndAccumulatedSize provides a mock function with given fields: hostname, amount
func (_m *FileRepository) GetOldestUpdatedAtByHostnameAndAccumulatedSize(hostname minerva.Hostname, amount uint64) ([]*minerva.File, error) {
	ret := _m.Called(hostname, amount)

	var r0 []*minerva.File
	if rf, ok := ret.Get(0).(func(minerva.Hostname, uint64) []*minerva.File); ok {
		r0 = rf(hostname, amount)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*minerva.File)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(minerva.Hostname, uint64) error); ok {
		r1 = rf(hostname, amount)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWithPendingOperations provides a mock function with given fields: hostname, limit
func (_m *FileRepository) GetWithPendingOperations(hostname minerva.Hostname, limit uint64) ([]*minerva.File, error) {
	ret := _m.Called(hostname, limit)

	var r0 []*minerva.File
	if rf, ok := ret.Get(0).(func(minerva.Hostname, uint64) []*minerva.File); ok {
		r0 = rf(hostname, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*minerva.File)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(minerva.Hostname, uint64) error); ok {
		r1 = rf(hostname, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TrackHit provides a mock function with given fields: id, remoteAddr
func (_m *FileRepository) TrackHit(id uuid.UUID, remoteAddr string) error {
	ret := _m.Called(id, remoteAddr)

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, string) error); ok {
		r0 = rf(id, remoteAddr)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: file
func (_m *FileRepository) Update(file *minerva.File) error {
	ret := _m.Called(file)

	var r0 error
	if rf, ok := ret.Get(0).(func(*minerva.File) error); ok {
		r0 = rf(file)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
