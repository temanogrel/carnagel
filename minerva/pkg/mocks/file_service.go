// Code generated by mockery v1.0.0. DO NOT EDIT.
package infinity_mocks

import ecosystem "git.misc.vee.bz/carnagel/go-ecosystem/domain"
import minerva "git.misc.vee.bz/carnagel/minerva/pkg"
import mock "github.com/stretchr/testify/mock"
import uuid "github.com/satori/go.uuid"

// FileService is an autogenerated mock type for the FileService type
type FileService struct {
	mock.Mock
}

// CleanUp provides a mock function with given fields:
func (_m *FileService) CleanUp() {
	_m.Called()
}

// Create provides a mock function with given fields: data
func (_m *FileService) Create(data *minerva.CreateFile) (*minerva.File, error) {
	ret := _m.Called(data)

	var r0 *minerva.File
	if rf, ok := ret.Get(0).(func(*minerva.CreateFile) *minerva.File); ok {
		r0 = rf(data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*minerva.File)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*minerva.CreateFile) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: id
func (_m *FileService) Delete(id uuid.UUID) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ScheduleDeletion provides a mock function with given fields: id
func (_m *FileService) ScheduleDeletion(id uuid.UUID) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ScheduleDeletionByExternalIdAndType provides a mock function with given fields: id, fileType
func (_m *FileService) ScheduleDeletionByExternalIdAndType(id ecosystem.ExternalId, fileType ecosystem.FileType) error {
	ret := _m.Called(id, fileType)

	var r0 error
	if rf, ok := ret.Get(0).(func(ecosystem.ExternalId, ecosystem.FileType) error); ok {
		r0 = rf(id, fileType)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ScheduleUpload provides a mock function with given fields: id, name
func (_m *FileService) ScheduleUpload(id uuid.UUID, name string) error {
	ret := _m.Called(id, name)

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, string) error); ok {
		r0 = rf(id, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetUpstoreHash provides a mock function with given fields: id, hash
func (_m *FileService) SetUpstoreHash(id uuid.UUID, hash string) error {
	ret := _m.Called(id, hash)

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, string) error); ok {
		r0 = rf(id, hash)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: data
func (_m *FileService) Update(data *minerva.UpdateFile) (*minerva.File, error) {
	ret := _m.Called(data)

	var r0 *minerva.File
	if rf, ok := ret.Get(0).(func(*minerva.UpdateFile) *minerva.File); ok {
		r0 = rf(data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*minerva.File)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*minerva.UpdateFile) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
