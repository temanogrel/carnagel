// Code generated by mockery v1.0.0
package mocks

import context "context"
import io "io"

import mock "github.com/stretchr/testify/mock"
import pb "git.misc.vee.bz/carnagel/minerva-bindings/src"
import uuid "github.com/satori/go.uuid"

// FileService is an autogenerated mock type for the FileService type
type FileService struct {
	mock.Mock
}

// HandleTransfer provides a mock function with given fields: ctx, id, file, extension
func (_m *FileService) HandleTransfer(ctx context.Context, id uuid.UUID, file io.Reader, extension string) error {
	ret := _m.Called(ctx, id, file, extension)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, io.Reader, string) error); ok {
		r0 = rf(ctx, id, file, extension)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// HandleUpload provides a mock function with given fields: file, fileName, externalId, fileType
func (_m *FileService) HandleUpload(file io.Reader, fileName string, externalId uint64, fileType pb.FileType) (uuid.UUID, error) {
	ret := _m.Called(file, fileName, externalId, fileType)

	var r0 uuid.UUID
	if rf, ok := ret.Get(0).(func(io.Reader, string, uint64, pb.FileType) uuid.UUID); ok {
		r0 = rf(file, fileName, externalId, fileType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(io.Reader, string, uint64, pb.FileType) error); ok {
		r1 = rf(file, fileName, externalId, fileType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Transfer provides a mock function with given fields: ctx, id, targetHost
func (_m *FileService) Transfer(ctx context.Context, id uuid.UUID, targetHost string) error {
	ret := _m.Called(ctx, id, targetHost)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string) error); ok {
		r0 = rf(ctx, id, targetHost)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
