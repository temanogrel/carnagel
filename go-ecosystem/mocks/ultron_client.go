// Code generated by mockery v1.0.0. DO NOT EDIT.
package mocks

import ecosystem "git.misc.vee.bz/carnagel/go-ecosystem/domain"
import mock "github.com/stretchr/testify/mock"

// UltronClient is an autogenerated mock type for the UltronClient type
type UltronClient struct {
	mock.Mock
}

// Create provides a mock function with given fields: post
func (_m *UltronClient) Create(post *ecosystem.UltronPost) error {
	ret := _m.Called(post)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ecosystem.UltronPost) error); ok {
		r0 = rf(post)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: entry
func (_m *UltronClient) Delete(entry *ecosystem.Recording) error {
	ret := _m.Called(entry)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ecosystem.Recording) error); ok {
		r0 = rf(entry)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: postId
func (_m *UltronClient) Get(postId uint64) (*ecosystem.UltronPost, error) {
	ret := _m.Called(postId)

	var r0 *ecosystem.UltronPost
	if rf, ok := ret.Get(0).(func(uint64) *ecosystem.UltronPost); ok {
		r0 = rf(postId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ecosystem.UltronPost)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(postId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: post
func (_m *UltronClient) Update(post *ecosystem.UltronPost) error {
	ret := _m.Called(post)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ecosystem.UltronPost) error); ok {
		r0 = rf(post)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
