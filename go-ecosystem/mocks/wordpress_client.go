// Code generated by mockery v1.0.0. DO NOT EDIT.
package mocks

import ecosystem "git.misc.vee.bz/carnagel/go-ecosystem/domain"
import mock "github.com/stretchr/testify/mock"

// WordpressClient is an autogenerated mock type for the WordpressClient type
type WordpressClient struct {
	mock.Mock
}

// Create provides a mock function with given fields: site, post
func (_m *WordpressClient) Create(site *ecosystem.Site, post *ecosystem.WordpressPost) error {
	ret := _m.Called(site, post)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ecosystem.Site, *ecosystem.WordpressPost) error); ok {
		r0 = rf(site, post)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: site, postId
func (_m *WordpressClient) Delete(site *ecosystem.Site, postId uint64) error {
	ret := _m.Called(site, postId)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ecosystem.Site, uint64) error); ok {
		r0 = rf(site, postId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: site, postId
func (_m *WordpressClient) Get(site *ecosystem.Site, postId uint64) (*ecosystem.WordpressPost, error) {
	ret := _m.Called(site, postId)

	var r0 *ecosystem.WordpressPost
	if rf, ok := ret.Get(0).(func(*ecosystem.Site, uint64) *ecosystem.WordpressPost); ok {
		r0 = rf(site, postId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ecosystem.WordpressPost)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ecosystem.Site, uint64) error); ok {
		r1 = rf(site, postId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: site, post
func (_m *WordpressClient) Update(site *ecosystem.Site, post *ecosystem.WordpressPost) error {
	ret := _m.Called(site, post)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ecosystem.Site, *ecosystem.WordpressPost) error); ok {
		r0 = rf(site, post)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
