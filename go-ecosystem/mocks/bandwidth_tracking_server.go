// Code generated by mockery v1.0.0. DO NOT EDIT.
package mocks

import common "git.misc.vee.bz/carnagel/go-ecosystem/protobuf/common"
import context "context"
import mock "github.com/stretchr/testify/mock"

// BandwidthTrackingServer is an autogenerated mock type for the BandwidthTrackingServer type
type BandwidthTrackingServer struct {
	mock.Mock
}

// AddConsumedBandwidth provides a mock function with given fields: _a0, _a1
func (_m *BandwidthTrackingServer) AddConsumedBandwidth(_a0 context.Context, _a1 *common.ConsumedBandwidthRequest) (*common.RemainingBandwidthResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *common.RemainingBandwidthResponse
	if rf, ok := ret.Get(0).(func(context.Context, *common.ConsumedBandwidthRequest) *common.RemainingBandwidthResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*common.RemainingBandwidthResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *common.ConsumedBandwidthRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRemainingBandwidth provides a mock function with given fields: _a0, _a1
func (_m *BandwidthTrackingServer) GetRemainingBandwidth(_a0 context.Context, _a1 *common.Token) (*common.RemainingBandwidthResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *common.RemainingBandwidthResponse
	if rf, ok := ret.Get(0).(func(context.Context, *common.Token) *common.RemainingBandwidthResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*common.RemainingBandwidthResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *common.Token) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
