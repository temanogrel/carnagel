// Code generated by mockery v1.0.0. DO NOT EDIT.
package mocks

import context "context"
import ecosystem "git.misc.vee.bz/carnagel/go-ecosystem/domain"
import mock "github.com/stretchr/testify/mock"

// AphroditeClient is an autogenerated mock type for the AphroditeClient type
type AphroditeClient struct {
	mock.Mock
}

// CreateBlocktrailWalletAddress provides a mock function with given fields: webhookId
func (_m *AphroditeClient) CreateBlocktrailWalletAddress(webhookId string) (*ecosystem.BlocktrailWalletAddress, error) {
	ret := _m.Called(webhookId)

	var r0 *ecosystem.BlocktrailWalletAddress
	if rf, ok := ret.Get(0).(func(string) *ecosystem.BlocktrailWalletAddress); ok {
		r0 = rf(webhookId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ecosystem.BlocktrailWalletAddress)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(webhookId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreatePostAssociation provides a mock function with given fields: recording, siteId, postId
func (_m *AphroditeClient) CreatePostAssociation(recording *ecosystem.Recording, siteId uint64, postId uint64) error {
	ret := _m.Called(recording, siteId, postId)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ecosystem.Recording, uint64, uint64) error); ok {
		r0 = rf(recording, siteId, postId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateRecording provides a mock function with given fields: recording
func (_m *AphroditeClient) CreateRecording(recording *ecosystem.Recording) error {
	ret := _m.Called(recording)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ecosystem.Recording) error); ok {
		r0 = rf(recording)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteRecording provides a mock function with given fields: _a0
func (_m *AphroditeClient) DeleteRecording(_a0 uint64) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllRecordings provides a mock function with given fields: _a0, parameters
func (_m *AphroditeClient) GetAllRecordings(_a0 context.Context, parameters ecosystem.RecordingCollectionQueryParams) (<-chan *ecosystem.Recording, error) {
	ret := _m.Called(_a0, parameters)

	var r0 <-chan *ecosystem.Recording
	if rf, ok := ret.Get(0).(func(context.Context, ecosystem.RecordingCollectionQueryParams) <-chan *ecosystem.Recording); ok {
		r0 = rf(_a0, parameters)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan *ecosystem.Recording)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, ecosystem.RecordingCollectionQueryParams) error); ok {
		r1 = rf(_a0, parameters)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPerformer provides a mock function with given fields: _a0
func (_m *AphroditeClient) GetPerformer(_a0 uint64) (*ecosystem.Performer, error) {
	ret := _m.Called(_a0)

	var r0 *ecosystem.Performer
	if rf, ok := ret.Get(0).(func(uint64) *ecosystem.Performer); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ecosystem.Performer)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRecording provides a mock function with given fields: _a0
func (_m *AphroditeClient) GetRecording(_a0 uint64) (*ecosystem.Recording, error) {
	ret := _m.Called(_a0)

	var r0 *ecosystem.Recording
	if rf, ok := ret.Get(0).(func(uint64) *ecosystem.Recording); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ecosystem.Recording)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRecordingBy provides a mock function with given fields: identifier, value
func (_m *AphroditeClient) GetRecordingBy(identifier string, value string) (*ecosystem.Recording, error) {
	ret := _m.Called(identifier, value)

	var r0 *ecosystem.Recording
	if rf, ok := ret.Get(0).(func(string, string) *ecosystem.Recording); ok {
		r0 = rf(identifier, value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ecosystem.Recording)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(identifier, value)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRecordingByLocation provides a mock function with given fields: hostname, path
func (_m *AphroditeClient) GetRecordingByLocation(hostname string, path string) (*ecosystem.Recording, error) {
	ret := _m.Called(hostname, path)

	var r0 *ecosystem.Recording
	if rf, ok := ret.Get(0).(func(string, string) *ecosystem.Recording); ok {
		r0 = rf(hostname, path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ecosystem.Recording)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(hostname, path)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRecordingByOldId provides a mock function with given fields: recordingId
func (_m *AphroditeClient) GetRecordingByOldId(recordingId uint64) (*ecosystem.Recording, error) {
	ret := _m.Called(recordingId)

	var r0 *ecosystem.Recording
	if rf, ok := ret.Get(0).(func(uint64) *ecosystem.Recording); ok {
		r0 = rf(recordingId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ecosystem.Recording)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(recordingId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRecordingByVideoUrl provides a mock function with given fields: url
func (_m *AphroditeClient) GetRecordingByVideoUrl(url string) (*ecosystem.Recording, error) {
	ret := _m.Called(url)

	var r0 *ecosystem.Recording
	if rf, ok := ret.Get(0).(func(string) *ecosystem.Recording); ok {
		r0 = rf(url)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ecosystem.Recording)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(url)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRecordings provides a mock function with given fields: params
func (_m *AphroditeClient) GetRecordings(params ecosystem.RecordingCollectionQueryParams) (*ecosystem.RecordingCollection, error) {
	ret := _m.Called(params)

	var r0 *ecosystem.RecordingCollection
	if rf, ok := ret.Get(0).(func(ecosystem.RecordingCollectionQueryParams) *ecosystem.RecordingCollection); ok {
		r0 = rf(params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ecosystem.RecordingCollection)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(ecosystem.RecordingCollectionQueryParams) error); ok {
		r1 = rf(params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSites provides a mock function with given fields:
func (_m *AphroditeClient) GetSites() ([]*ecosystem.Site, error) {
	ret := _m.Called()

	var r0 []*ecosystem.Site
	if rf, ok := ret.Get(0).(func() []*ecosystem.Site); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*ecosystem.Site)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetRecordingStateById provides a mock function with given fields: recordingId, state
func (_m *AphroditeClient) SetRecordingStateById(recordingId uint64, state string) error {
	ret := _m.Called(recordingId, state)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64, string) error); ok {
		r0 = rf(recordingId, state)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateRecording provides a mock function with given fields: _a0
func (_m *AphroditeClient) UpdateRecording(_a0 *ecosystem.Recording) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ecosystem.Recording) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
