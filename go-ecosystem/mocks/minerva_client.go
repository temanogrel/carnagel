// Code generated by mockery v1.0.0. DO NOT EDIT.
package mocks

import context "context"
import ecosystem "git.misc.vee.bz/carnagel/go-ecosystem/domain"
import mock "github.com/stretchr/testify/mock"
import os "os"
import pb "git.misc.vee.bz/carnagel/minerva-bindings/src"
import uuid "github.com/satori/go.uuid"

// MinervaClient is an autogenerated mock type for the MinervaClient type
type MinervaClient struct {
	mock.Mock
}

// Download provides a mock function with given fields: fileUuid
func (_m *MinervaClient) Download(fileUuid uuid.UUID) (string, error) {
	ret := _m.Called(fileUuid)

	var r0 string
	if rf, ok := ret.Get(0).(func(uuid.UUID) string); ok {
		r0 = rf(fileUuid)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(fileUuid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDataByLocation provides a mock function with given fields: path
func (_m *MinervaClient) GetDataByLocation(path string) (*pb.FileData, error) {
	ret := _m.Called(path)

	var r0 *pb.FileData
	if rf, ok := ret.Get(0).(func(string) *pb.FileData); ok {
		r0 = rf(path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.FileData)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(path)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDataByUuid provides a mock function with given fields: uuid2
func (_m *MinervaClient) GetDataByUuid(uuid2 uuid.UUID) (*pb.FileData, error) {
	ret := _m.Called(uuid2)

	var r0 *pb.FileData
	if rf, ok := ret.Get(0).(func(uuid.UUID) *pb.FileData); ok {
		r0 = rf(uuid2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.FileData)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(uuid2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HasBulk provides a mock function with given fields: ids
func (_m *MinervaClient) HasBulk(ids []ecosystem.ExternalId) (map[ecosystem.ExternalId]bool, error) {
	ret := _m.Called(ids)

	var r0 map[ecosystem.ExternalId]bool
	if rf, ok := ret.Get(0).(func([]ecosystem.ExternalId) map[ecosystem.ExternalId]bool); ok {
		r0 = rf(ids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[ecosystem.ExternalId]bool)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]ecosystem.ExternalId) error); ok {
		r1 = rf(ids)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Probe provides a mock function with given fields: file
func (_m *MinervaClient) Probe(file uuid.UUID) (bool, error) {
	ret := _m.Called(file)

	var r0 bool
	if rf, ok := ret.Get(0).(func(uuid.UUID) bool); ok {
		r0 = rf(file)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(file)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RequestDeletion provides a mock function with given fields: fileUuid
func (_m *MinervaClient) RequestDeletion(fileUuid uuid.UUID) error {
	ret := _m.Called(fileUuid)

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) error); ok {
		r0 = rf(fileUuid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RequestDeletionByType provides a mock function with given fields: id, fileType
func (_m *MinervaClient) RequestDeletionByType(id ecosystem.ExternalId, fileType ecosystem.FileType) error {
	ret := _m.Called(id, fileType)

	var r0 error
	if rf, ok := ret.Get(0).(func(ecosystem.ExternalId, ecosystem.FileType) error); ok {
		r0 = rf(id, fileType)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RequestUpload provides a mock function with given fields: fileUuid, name
func (_m *MinervaClient) RequestUpload(fileUuid uuid.UUID, name string) error {
	ret := _m.Called(fileUuid, name)

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, string) error); ok {
		r0 = rf(fileUuid, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Transfer provides a mock function with given fields: ctx, id, externalId, file, targetHostname
func (_m *MinervaClient) Transfer(ctx context.Context, id uuid.UUID, externalId ecosystem.ExternalId, file *os.File, targetHostname string) error {
	ret := _m.Called(ctx, id, externalId, file, targetHostname)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, ecosystem.ExternalId, *os.File, string) error); ok {
		r0 = rf(ctx, id, externalId, file, targetHostname)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Upload provides a mock function with given fields: file, id, fileType, metadata
func (_m *MinervaClient) Upload(file *os.File, id ecosystem.ExternalId, fileType ecosystem.FileType, metadata ecosystem.FileMetadata) (uuid.UUID, error) {
	ret := _m.Called(file, id, fileType, metadata)

	var r0 uuid.UUID
	if rf, ok := ret.Get(0).(func(*os.File, ecosystem.ExternalId, ecosystem.FileType, ecosystem.FileMetadata) uuid.UUID); ok {
		r0 = rf(file, id, fileType, metadata)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*os.File, ecosystem.ExternalId, ecosystem.FileType, ecosystem.FileMetadata) error); ok {
		r1 = rf(file, id, fileType, metadata)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
