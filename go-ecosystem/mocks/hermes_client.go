// Code generated by mockery v1.0.0. DO NOT EDIT.
package mocks

import ecosystem "git.misc.vee.bz/carnagel/go-ecosystem/domain"
import mock "github.com/stretchr/testify/mock"

// HermesClient is an autogenerated mock type for the HermesClient type
type HermesClient struct {
	mock.Mock
}

// Create provides a mock function with given fields: url
func (_m *HermesClient) Create(url string) (*ecosystem.HermesUrl, error) {
	ret := _m.Called(url)

	var r0 *ecosystem.HermesUrl
	if rf, ok := ret.Get(0).(func(string) *ecosystem.HermesUrl); ok {
		r0 = rf(url)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ecosystem.HermesUrl)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(url)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByOriginalUrl provides a mock function with given fields: _a0
func (_m *HermesClient) GetByOriginalUrl(_a0 string) (*ecosystem.HermesUrl, error) {
	ret := _m.Called(_a0)

	var r0 *ecosystem.HermesUrl
	if rf, ok := ret.Get(0).(func(string) *ecosystem.HermesUrl); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ecosystem.HermesUrl)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReplaceUrl provides a mock function with given fields: old, new
func (_m *HermesClient) ReplaceUrl(old string, new string) error {
	ret := _m.Called(old, new)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(old, new)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
