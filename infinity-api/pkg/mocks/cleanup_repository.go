// Code generated by mockery v1.0.0. DO NOT EDIT.

package infinity_mocks

import context "context"
import infinity "git.misc.vee.bz/carnagel/infinity-api/pkg"
import mock "github.com/stretchr/testify/mock"

// CleanupRepository is an autogenerated mock type for the CleanupRepository type
type CleanupRepository struct {
	mock.Mock
}

// IsUpstoreHashDeletable provides a mock function with given fields: ctx, hash
func (_m *CleanupRepository) IsUpstoreHashDeletable(ctx context.Context, hash string) (bool, error) {
	ret := _m.Called(ctx, hash)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, hash)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, hash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateNonDeletableRecordings provides a mock function with given fields: ctx, recordings
func (_m *CleanupRepository) UpdateNonDeletableRecordings(ctx context.Context, recordings []infinity.NonDeletableRecording) error {
	ret := _m.Called(ctx, recordings)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []infinity.NonDeletableRecording) error); ok {
		r0 = rf(ctx, recordings)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
