// Code generated by mockery v1.0.0. DO NOT EDIT.

package infinity_mocks

import infinity "git.misc.vee.bz/carnagel/infinity-api/pkg"
import mock "github.com/stretchr/testify/mock"
import uuid "github.com/satori/go.uuid"

// BandwidthConsumptionRepository is an autogenerated mock type for the BandwidthConsumptionRepository type
type BandwidthConsumptionRepository struct {
	mock.Mock
}

// AddConsumption provides a mock function with given fields: consumption
func (_m *BandwidthConsumptionRepository) AddConsumption(consumption *infinity.BandwidthConsumption) error {
	ret := _m.Called(consumption)

	var r0 error
	if rf, ok := ret.Get(0).(func(*infinity.BandwidthConsumption) error); ok {
		r0 = rf(consumption)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetConsumptionToday provides a mock function with given fields: session
func (_m *BandwidthConsumptionRepository) GetConsumptionToday(session uuid.UUID) (uint64, error) {
	ret := _m.Called(session)

	var r0 uint64
	if rf, ok := ret.Get(0).(func(uuid.UUID) uint64); ok {
		r0 = rf(session)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(session)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTodaysEntries provides a mock function with given fields:
func (_m *BandwidthConsumptionRepository) GetTodaysEntries() ([]*infinity.BandwidthConsumption, error) {
	ret := _m.Called()

	var r0 []*infinity.BandwidthConsumption
	if rf, ok := ret.Get(0).(func() []*infinity.BandwidthConsumption); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*infinity.BandwidthConsumption)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
