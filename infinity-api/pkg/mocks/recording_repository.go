// Code generated by mockery v1.0.0. DO NOT EDIT.

package infinity_mocks

import infinity "git.misc.vee.bz/carnagel/infinity-api/pkg"
import mock "github.com/stretchr/testify/mock"
import time "time"
import uuid "github.com/satori/go.uuid"

// RecordingRepository is an autogenerated mock type for the RecordingRepository type
type RecordingRepository struct {
	mock.Mock
}

// AddView provides a mock function with given fields: _a0, _a1
func (_m *RecordingRepository) AddView(_a0 *infinity.Recording, _a1 string) (bool, error) {
	ret := _m.Called(_a0, _a1)

	var r0 bool
	if rf, ok := ret.Get(0).(func(*infinity.Recording, string) bool); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*infinity.Recording, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CanRemove provides a mock function with given fields: id
func (_m *RecordingRepository) CanRemove(id uuid.UUID) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Create provides a mock function with given fields: _a0, _a1
func (_m *RecordingRepository) Create(_a0 *infinity.Recording, _a1 *infinity.Performer) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*infinity.Recording, *infinity.Performer) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllMissingSlug provides a mock function with given fields:
func (_m *RecordingRepository) GetAllMissingSlug() ([]infinity.Recording, error) {
	ret := _m.Called()

	var r0 []infinity.Recording
	if rf, ok := ret.Get(0).(func() []infinity.Recording); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]infinity.Recording)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByExternalId provides a mock function with given fields: id
func (_m *RecordingRepository) GetByExternalId(id uint64) (*infinity.Recording, error) {
	ret := _m.Called(id)

	var r0 *infinity.Recording
	if rf, ok := ret.Get(0).(func(uint64) *infinity.Recording); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*infinity.Recording)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBySlug provides a mock function with given fields: slug
func (_m *RecordingRepository) GetBySlug(slug string) (*infinity.Recording, error) {
	ret := _m.Called(slug)

	var r0 *infinity.Recording
	if rf, ok := ret.Get(0).(func(string) *infinity.Recording); ok {
		r0 = rf(slug)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*infinity.Recording)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(slug)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBySlugWithUserContext provides a mock function with given fields: slug, user
func (_m *RecordingRepository) GetBySlugWithUserContext(slug string, user uuid.UUID) (*infinity.RecordingWithUserData, error) {
	ret := _m.Called(slug, user)

	var r0 *infinity.RecordingWithUserData
	if rf, ok := ret.Get(0).(func(string, uuid.UUID) *infinity.RecordingWithUserData); ok {
		r0 = rf(slug, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*infinity.RecordingWithUserData)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, uuid.UUID) error); ok {
		r1 = rf(slug, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByUuid provides a mock function with given fields: id
func (_m *RecordingRepository) GetByUuid(id uuid.UUID) (*infinity.Recording, error) {
	ret := _m.Called(id)

	var r0 *infinity.Recording
	if rf, ok := ret.Get(0).(func(uuid.UUID) *infinity.Recording); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*infinity.Recording)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByUuidWithUserContext provides a mock function with given fields: recording, user
func (_m *RecordingRepository) GetByUuidWithUserContext(recording uuid.UUID, user uuid.UUID) (*infinity.RecordingWithUserData, error) {
	ret := _m.Called(recording, user)

	var r0 *infinity.RecordingWithUserData
	if rf, ok := ret.Get(0).(func(uuid.UUID, uuid.UUID) *infinity.RecordingWithUserData); ok {
		r0 = rf(recording, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*infinity.RecordingWithUserData)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID, uuid.UUID) error); ok {
		r1 = rf(recording, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRecordingsCreatedBefore provides a mock function with given fields: _a0, limit
func (_m *RecordingRepository) GetRecordingsCreatedBefore(_a0 time.Time, limit int) ([]infinity.Recording, error) {
	ret := _m.Called(_a0, limit)

	var r0 []infinity.Recording
	if rf, ok := ret.Get(0).(func(time.Time, int) []infinity.Recording); ok {
		r0 = rf(_a0, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]infinity.Recording)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(time.Time, int) error); ok {
		r1 = rf(_a0, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUuidByExternalId provides a mock function with given fields: id
func (_m *RecordingRepository) GetUuidByExternalId(id uint64) (uuid.UUID, error) {
	ret := _m.Called(id)

	var r0 uuid.UUID
	if rf, ok := ret.Get(0).(func(uint64) uuid.UUID); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LoadPageCacheFromRedis provides a mock function with given fields:
func (_m *RecordingRepository) LoadPageCacheFromRedis() {
	_m.Called()
}

// MarkAsValidated provides a mock function with given fields: ids
func (_m *RecordingRepository) MarkAsValidated(ids []uuid.UUID) error {
	ret := _m.Called(ids)

	var r0 error
	if rf, ok := ret.Get(0).(func([]uuid.UUID) error); ok {
		r0 = rf(ids)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Matching provides a mock function with given fields: _a0
func (_m *RecordingRepository) Matching(_a0 *infinity.RecordingRepositoryCriteria) ([]infinity.Recording, int, error) {
	ret := _m.Called(_a0)

	var r0 []infinity.Recording
	if rf, ok := ret.Get(0).(func(*infinity.RecordingRepositoryCriteria) []infinity.Recording); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]infinity.Recording)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(*infinity.RecordingRepositoryCriteria) int); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(*infinity.RecordingRepositoryCriteria) error); ok {
		r2 = rf(_a0)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MatchingWithUserContext provides a mock function with given fields: criteria, user
func (_m *RecordingRepository) MatchingWithUserContext(criteria *infinity.RecordingRepositoryCriteria, user uuid.UUID) ([]infinity.RecordingWithUserData, int, error) {
	ret := _m.Called(criteria, user)

	var r0 []infinity.RecordingWithUserData
	if rf, ok := ret.Get(0).(func(*infinity.RecordingRepositoryCriteria, uuid.UUID) []infinity.RecordingWithUserData); ok {
		r0 = rf(criteria, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]infinity.RecordingWithUserData)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(*infinity.RecordingRepositoryCriteria, uuid.UUID) int); ok {
		r1 = rf(criteria, user)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(*infinity.RecordingRepositoryCriteria, uuid.UUID) error); ok {
		r2 = rf(criteria, user)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// RebuildPageCache provides a mock function with given fields: fromPage
func (_m *RecordingRepository) RebuildPageCache(fromPage uint64) {
	_m.Called(fromPage)
}

// Remove provides a mock function with given fields: id
func (_m *RecordingRepository) Remove(id uuid.UUID) (bool, error) {
	ret := _m.Called(id)

	var r0 bool
	if rf, ok := ret.Get(0).(func(uuid.UUID) bool); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: recording
func (_m *RecordingRepository) Update(recording *infinity.Recording) error {
	ret := _m.Called(recording)

	var r0 error
	if rf, ok := ret.Get(0).(func(*infinity.Recording) error); ok {
		r0 = rf(recording)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
