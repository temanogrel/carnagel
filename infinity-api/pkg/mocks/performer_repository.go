// Code generated by mockery v1.0.0. DO NOT EDIT.

package infinity_mocks

import infinity "git.misc.vee.bz/carnagel/infinity-api/pkg"
import mock "github.com/stretchr/testify/mock"
import uuid "github.com/satori/go.uuid"

// PerformerRepository is an autogenerated mock type for the PerformerRepository type
type PerformerRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: performer
func (_m *PerformerRepository) Create(performer *infinity.Performer) error {
	ret := _m.Called(performer)

	var r0 error
	if rf, ok := ret.Get(0).(func(*infinity.Performer) error); ok {
		r0 = rf(performer)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllMissingSlug provides a mock function with given fields:
func (_m *PerformerRepository) GetAllMissingSlug() ([]infinity.Performer, error) {
	ret := _m.Called()

	var r0 []infinity.Performer
	if rf, ok := ret.Get(0).(func() []infinity.Performer); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]infinity.Performer)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByExternalId provides a mock function with given fields: id
func (_m *PerformerRepository) GetByExternalId(id uint64) (*infinity.Performer, error) {
	ret := _m.Called(id)

	var r0 *infinity.Performer
	if rf, ok := ret.Get(0).(func(uint64) *infinity.Performer); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*infinity.Performer)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBySlug provides a mock function with given fields: slug
func (_m *PerformerRepository) GetBySlug(slug string) (*infinity.Performer, error) {
	ret := _m.Called(slug)

	var r0 *infinity.Performer
	if rf, ok := ret.Get(0).(func(string) *infinity.Performer); ok {
		r0 = rf(slug)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*infinity.Performer)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(slug)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByUuid provides a mock function with given fields: id
func (_m *PerformerRepository) GetByUuid(id uuid.UUID) (*infinity.Performer, error) {
	ret := _m.Called(id)

	var r0 *infinity.Performer
	if rf, ok := ret.Get(0).(func(uuid.UUID) *infinity.Performer); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*infinity.Performer)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Matching provides a mock function with given fields: criteria
func (_m *PerformerRepository) Matching(criteria *infinity.PerformerRepositoryCriteria) ([]*infinity.Performer, int, error) {
	ret := _m.Called(criteria)

	var r0 []*infinity.Performer
	if rf, ok := ret.Get(0).(func(*infinity.PerformerRepositoryCriteria) []*infinity.Performer); ok {
		r0 = rf(criteria)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*infinity.Performer)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(*infinity.PerformerRepositoryCriteria) int); ok {
		r1 = rf(criteria)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(*infinity.PerformerRepositoryCriteria) error); ok {
		r2 = rf(criteria)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Update provides a mock function with given fields: performer
func (_m *PerformerRepository) Update(performer *infinity.Performer) error {
	ret := _m.Called(performer)

	var r0 error
	if rf, ok := ret.Get(0).(func(*infinity.Performer) error); ok {
		r0 = rf(performer)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
