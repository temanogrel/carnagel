// Code generated by mockery v1.0.0. DO NOT EDIT.

package infinity_mocks

import context "context"
import ecosystem "git.misc.vee.bz/carnagel/go-ecosystem/domain"
import infinity "git.misc.vee.bz/carnagel/infinity-api/pkg"
import mock "github.com/stretchr/testify/mock"

// RecordingService is an autogenerated mock type for the RecordingService type
type RecordingService struct {
	mock.Mock
}

// DeleteRecording provides a mock function with given fields: _a0, _a1
func (_m *RecordingService) DeleteRecording(_a0 context.Context, _a1 uint64) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ImportFromAphrodite provides a mock function with given fields: recording, performer
func (_m *RecordingService) ImportFromAphrodite(recording *ecosystem.Recording, performer *infinity.Performer) (*infinity.Recording, error) {
	ret := _m.Called(recording, performer)

	var r0 *infinity.Recording
	if rf, ok := ret.Get(0).(func(*ecosystem.Recording, *infinity.Performer) *infinity.Recording); ok {
		r0 = rf(recording, performer)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*infinity.Recording)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ecosystem.Recording, *infinity.Performer) error); ok {
		r1 = rf(recording, performer)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ImportRecording provides a mock function with given fields: _a0, _a1
func (_m *RecordingService) ImportRecording(_a0 context.Context, _a1 uint64) (*infinity.Recording, *infinity.Performer, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *infinity.Recording
	if rf, ok := ret.Get(0).(func(context.Context, uint64) *infinity.Recording); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*infinity.Recording)
		}
	}

	var r1 *infinity.Performer
	if rf, ok := ret.Get(1).(func(context.Context, uint64) *infinity.Performer); ok {
		r1 = rf(_a0, _a1)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*infinity.Performer)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, uint64) error); ok {
		r2 = rf(_a0, _a1)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Run provides a mock function with given fields: _a0
func (_m *RecordingService) Run(_a0 context.Context) {
	_m.Called(_a0)
}
