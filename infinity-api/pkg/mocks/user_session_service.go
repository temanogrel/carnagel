// Code generated by mockery v1.0.0. DO NOT EDIT.

package infinity_mocks

import ecosystem "git.misc.vee.bz/carnagel/go-ecosystem/domain"
import infinity "git.misc.vee.bz/carnagel/infinity-api/pkg"
import mock "github.com/stretchr/testify/mock"
import uuid "github.com/satori/go.uuid"

// UserSessionService is an autogenerated mock type for the UserSessionService type
type UserSessionService struct {
	mock.Mock
}

// Authenticate provides a mock function with given fields: username, password, remoteAddr
func (_m *UserSessionService) Authenticate(username string, password string, remoteAddr string) (string, *infinity.User, error) {
	ret := _m.Called(username, password, remoteAddr)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string, string) string); ok {
		r0 = rf(username, password, remoteAddr)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 *infinity.User
	if rf, ok := ret.Get(1).(func(string, string, string) *infinity.User); ok {
		r1 = rf(username, password, remoteAddr)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*infinity.User)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string, string, string) error); ok {
		r2 = rf(username, password, remoteAddr)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// New provides a mock function with given fields: remoteAddr
func (_m *UserSessionService) New(remoteAddr string) (string, error) {
	ret := _m.Called(remoteAddr)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(remoteAddr)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(remoteAddr)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ParseToken provides a mock function with given fields: token
func (_m *UserSessionService) ParseToken(token string) (*ecosystem.JwtClaims, error) {
	ret := _m.Called(token)

	var r0 *ecosystem.JwtClaims
	if rf, ok := ret.Get(0).(func(string) *ecosystem.JwtClaims); ok {
		r0 = rf(token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ecosystem.JwtClaims)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Renew provides a mock function with given fields: _a0, _a1, _a2
func (_m *UserSessionService) Renew(_a0 uuid.UUID, _a1 uuid.UUID, _a2 bool) (string, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 string
	if rf, ok := ret.Get(0).(func(uuid.UUID, uuid.UUID, bool) string); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID, uuid.UUID, bool) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
