// Code generated by mockery v1.0.0. DO NOT EDIT.

package infinity_mocks

import infinity "git.misc.vee.bz/carnagel/infinity-api/pkg"
import mock "github.com/stretchr/testify/mock"
import uuid "github.com/satori/go.uuid"

// UserRepository is an autogenerated mock type for the UserRepository type
type UserRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: _a0
func (_m *UserRepository) Create(_a0 *infinity.User) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*infinity.User) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByEmail provides a mock function with given fields: _a0
func (_m *UserRepository) GetByEmail(_a0 string) (*infinity.User, error) {
	ret := _m.Called(_a0)

	var r0 *infinity.User
	if rf, ok := ret.Get(0).(func(string) *infinity.User); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*infinity.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByUsername provides a mock function with given fields: _a0
func (_m *UserRepository) GetByUsername(_a0 string) (*infinity.User, error) {
	ret := _m.Called(_a0)

	var r0 *infinity.User
	if rf, ok := ret.Get(0).(func(string) *infinity.User); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*infinity.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByUsernameOrEmail provides a mock function with given fields: _a0
func (_m *UserRepository) GetByUsernameOrEmail(_a0 string) (*infinity.User, error) {
	ret := _m.Called(_a0)

	var r0 *infinity.User
	if rf, ok := ret.Get(0).(func(string) *infinity.User); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*infinity.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByUuid provides a mock function with given fields: _a0
func (_m *UserRepository) GetByUuid(_a0 uuid.UUID) (*infinity.User, error) {
	ret := _m.Called(_a0)

	var r0 *infinity.User
	if rf, ok := ret.Get(0).(func(uuid.UUID) *infinity.User); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*infinity.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUsersWithExpiredPaymentPlan provides a mock function with given fields:
func (_m *UserRepository) GetUsersWithExpiredPaymentPlan() ([]*infinity.User, error) {
	ret := _m.Called()

	var r0 []*infinity.User
	if rf, ok := ret.Get(0).(func() []*infinity.User); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*infinity.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUsersWithExpiringPaymentPlan provides a mock function with given fields: daysBeforeExpiration
func (_m *UserRepository) GetUsersWithExpiringPaymentPlan(daysBeforeExpiration uint) ([]*infinity.User, error) {
	ret := _m.Called(daysBeforeExpiration)

	var r0 []*infinity.User
	if rf, ok := ret.Get(0).(func(uint) []*infinity.User); ok {
		r0 = rf(daysBeforeExpiration)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*infinity.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(daysBeforeExpiration)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Matching provides a mock function with given fields: _a0
func (_m *UserRepository) Matching(_a0 *infinity.UserRepositoryCriteria) ([]infinity.User, int, error) {
	ret := _m.Called(_a0)

	var r0 []infinity.User
	if rf, ok := ret.Get(0).(func(*infinity.UserRepositoryCriteria) []infinity.User); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]infinity.User)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(*infinity.UserRepositoryCriteria) int); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(*infinity.UserRepositoryCriteria) error); ok {
		r2 = rf(_a0)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// RemoveById provides a mock function with given fields: _a0
func (_m *UserRepository) RemoveById(_a0 uuid.UUID) (bool, error) {
	ret := _m.Called(_a0)

	var r0 bool
	if rf, ok := ret.Get(0).(func(uuid.UUID) bool); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ToggleFavorite provides a mock function with given fields: _a0, _a1
func (_m *UserRepository) ToggleFavorite(_a0 uuid.UUID, _a1 uuid.UUID) (bool, error) {
	ret := _m.Called(_a0, _a1)

	var r0 bool
	if rf, ok := ret.Get(0).(func(uuid.UUID, uuid.UUID) bool); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID, uuid.UUID) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ToggleLike provides a mock function with given fields: _a0, _a1
func (_m *UserRepository) ToggleLike(_a0 uuid.UUID, _a1 uuid.UUID) (bool, error) {
	ret := _m.Called(_a0, _a1)

	var r0 bool
	if rf, ok := ret.Get(0).(func(uuid.UUID, uuid.UUID) bool); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID, uuid.UUID) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: _a0
func (_m *UserRepository) Update(_a0 *infinity.User) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*infinity.User) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
