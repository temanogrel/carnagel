// Code generated by mockery v1.0.0. DO NOT EDIT.

package infinity_mocks

import context "context"
import infinity "git.misc.vee.bz/carnagel/infinity-api/pkg"
import mock "github.com/stretchr/testify/mock"
import uuid "github.com/satori/go.uuid"

// BandwidthConsumptionCollector is an autogenerated mock type for the BandwidthConsumptionCollector type
type BandwidthConsumptionCollector struct {
	mock.Mock
}

// AddBlackListedSession provides a mock function with given fields: session
func (_m *BandwidthConsumptionCollector) AddBlackListedSession(session uuid.UUID) {
	_m.Called(session)
}

// AddConsumption provides a mock function with given fields: consumption
func (_m *BandwidthConsumptionCollector) AddConsumption(consumption *infinity.BandwidthConsumption) (uint64, uint64) {
	ret := _m.Called(consumption)

	var r0 uint64
	if rf, ok := ret.Get(0).(func(*infinity.BandwidthConsumption) uint64); ok {
		r0 = rf(consumption)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	var r1 uint64
	if rf, ok := ret.Get(1).(func(*infinity.BandwidthConsumption) uint64); ok {
		r1 = rf(consumption)
	} else {
		r1 = ret.Get(1).(uint64)
	}

	return r0, r1
}

// GetTotalConsumptionToday provides a mock function with given fields: session
func (_m *BandwidthConsumptionCollector) GetTotalConsumptionToday(session uuid.UUID) (uint64, error) {
	ret := _m.Called(session)

	var r0 uint64
	if rf, ok := ret.Get(0).(func(uuid.UUID) uint64); ok {
		r0 = rf(session)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(session)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTotalConsumptionTodayOnRecording provides a mock function with given fields: session, recordingId
func (_m *BandwidthConsumptionCollector) GetTotalConsumptionTodayOnRecording(session uuid.UUID, recordingId uuid.UUID) (uint64, error) {
	ret := _m.Called(session, recordingId)

	var r0 uint64
	if rf, ok := ret.Get(0).(func(uuid.UUID, uuid.UUID) uint64); ok {
		r0 = rf(session, recordingId)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID, uuid.UUID) error); ok {
		r1 = rf(session, recordingId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RebuildFromToday provides a mock function with given fields:
func (_m *BandwidthConsumptionCollector) RebuildFromToday() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Synchronizer provides a mock function with given fields: ctx
func (_m *BandwidthConsumptionCollector) Synchronizer(ctx context.Context) {
	_m.Called(ctx)
}
