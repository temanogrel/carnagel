// Code generated by mockery v1.0.0. DO NOT EDIT.

package infinity_mocks

import infinity "git.misc.vee.bz/carnagel/infinity-api/pkg"
import mock "github.com/stretchr/testify/mock"
import uuid "github.com/satori/go.uuid"

// PaymentTransactionRepository is an autogenerated mock type for the PaymentTransactionRepository type
type PaymentTransactionRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: paymentTransaction
func (_m *PaymentTransactionRepository) Create(paymentTransaction *infinity.PaymentTransaction) error {
	ret := _m.Called(paymentTransaction)

	var r0 error
	if rf, ok := ret.Get(0).(func(*infinity.PaymentTransaction) error); ok {
		r0 = rf(paymentTransaction)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByUuid provides a mock function with given fields: id
func (_m *PaymentTransactionRepository) GetByUuid(id uuid.UUID) (*infinity.PaymentTransaction, error) {
	ret := _m.Called(id)

	var r0 *infinity.PaymentTransaction
	if rf, ok := ret.Get(0).(func(uuid.UUID) *infinity.PaymentTransaction); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*infinity.PaymentTransaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByWebhookUuid provides a mock function with given fields: id
func (_m *PaymentTransactionRepository) GetByWebhookUuid(id uuid.UUID) (*infinity.PaymentTransaction, error) {
	ret := _m.Called(id)

	var r0 *infinity.PaymentTransaction
	if rf, ok := ret.Get(0).(func(uuid.UUID) *infinity.PaymentTransaction); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*infinity.PaymentTransaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Matching provides a mock function with given fields: criteria
func (_m *PaymentTransactionRepository) Matching(criteria *infinity.PaymentTransactionRepositoryCriteria) ([]*infinity.PaymentTransaction, int, error) {
	ret := _m.Called(criteria)

	var r0 []*infinity.PaymentTransaction
	if rf, ok := ret.Get(0).(func(*infinity.PaymentTransactionRepositoryCriteria) []*infinity.PaymentTransaction); ok {
		r0 = rf(criteria)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*infinity.PaymentTransaction)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(*infinity.PaymentTransactionRepositoryCriteria) int); ok {
		r1 = rf(criteria)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(*infinity.PaymentTransactionRepositoryCriteria) error); ok {
		r2 = rf(criteria)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Update provides a mock function with given fields: paymentTransaction
func (_m *PaymentTransactionRepository) Update(paymentTransaction *infinity.PaymentTransaction) error {
	ret := _m.Called(paymentTransaction)

	var r0 error
	if rf, ok := ret.Get(0).(func(*infinity.PaymentTransaction) error); ok {
		r0 = rf(paymentTransaction)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
